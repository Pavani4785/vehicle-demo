name: Build and Deploy to Lambda
 
on:
  push:
    branches: [ main ]
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
 
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
 
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
 
    - name: Install Gradle (if wrapper is missing)
      run: |
        if [ ! -f "./gradlew" ]; then
          echo "Gradle wrapper not found. Installing Gradle..."
          sudo apt-get update
          sudo apt-get install -y gradle
        else
          echo "Gradle wrapper already exists."
        fi
 
    - name: Generate Gradle Wrapper if missing
      run: |
        if [ ! -f "./gradlew" ]; then
          echo "Generating Gradle wrapper..."
          gradle wrapper
          chmod +x gradlew
        else
          echo "Gradle wrapper already exists."
        fi
 
    - name: Build with Gradle (debug mode)
      run: ./gradlew build --stacktrace --info
 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
 
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
        docker login --username AWS --password-stdin \
        ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
 
    - name: Build and Push Docker image
      env:
        IMAGE_TAG: latest
      run: |
        IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:${IMAGE_TAG}
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
 
    - name: Update Lambda function
      run: |
        IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY_NAME }}:latest
        aws lambda update-function-code \
          --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
          --image-uri $IMAGE_URI
